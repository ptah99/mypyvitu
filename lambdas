# lambda argument: expression
add10 = lambda x: x + 10
print(add10(5))


def add10_func(x):
    return x + 10


mult = lambda x, y: x * y
print(mult(2, 7))

points2D = [(1, 2), (15, 1), (5, -1), (10, 4)]
points2D_sorted = sorted(points2D, key=lambda i: i[0] + i[1])

print(points2D)
print(points2D_sorted)

# map(func, seq)
a = [1, 2, 3, 4, 5, 6]
b = map(lambda x: x * 2, a)
print(list(b))
# OR
c = [x * 2 for x in a]
print(c)
# filter(func, seq)
k = filter(lambda x: x % 2 == 0, a)  # to achieve even number
print(list(k))
# or
k1 = [x for x in a if x % 2 == 0]
print(k1)
# reduce(func, seq): it repeatedly applies the function to elements and returns a single value
from functools import reduce

product_a = reduce(lambda x, y: x * y, a)
print(product_a)
